#!/bin/bash -e
# easy remote execution of projects in patan.act.uji.es
# 	source		https://github.com/MAProsper/patan-run
# 	developer	Miguel Ángel Prosper Quíros	(al386125@uji.es)
# 	tester		Paul Ximo Pluijter Izquierdo	(al386152@uji.es)
# 	tester		Adrián Masiá Moreno		(al386159@uji.es)
# 	tester		Adrián Luque Bueso		(al387532@uji.es)
# 	license		BSD 3-Clause
# 	version		8.2.2

info() { echo "$NAME: $*" >&2; }; err() { info "$*"; exit 1; }; arg() { printf '%q ' "$@"; }
NAME='patan-run'; RWD="${HIST=.local/state/$NAME}/${ID=$(date +%F-%H-%M-%S)}"
TYPE="$2"; VAR="$(arg "$@")"; TMP=".$NAME-$ID"; JOB="$TMP/$TYPE"

#!/man/patan-run
# user type [args...]	(cd to project's root first)
# 	user	al386125	(skip username if installed)
# 	type	java, ...	(type of action or project)
# 	args	...		(type specific arguments)

#!/usr/patan-run
SERVER="$1@patan.act.uji.es"; PROXY="${PROXY-$1}@lynx.uji.es"
ENV="${ENV-$HOME/.${SHELL##*/}rc}"; EXE="$HOME/.local/bin/$NAME"; SCP="$HOME/.ssh/$NAME"
OPT="-o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa -o PreferredAuthentications=password"
SSH="ssh $OPT -o ControlPersist=${TMOUT=256} -${DISPLAY+Y}S $SCP -J $PROXY $SERVER"; RC="alias '$NAME=$(arg "$EXE")$1'"
exe() { echo "HIST=$HIST; ID=$ID; set -- $VAR"; tuc 'bin' 'bash'; tuc "$1" "$NAME"; tuc "$1"; }
rmc() { [ -f "$ENV" ] && grep -vw "^${RC%%=*}" <<<"$(<"$ENV")" >"$ENV" || :; }
cpx() { mkdir -p "${1%/*}"; [ "$0" -ef "$1" ] || install "$0" "$1"; }
tuc() { awk "/^#!/{r=0}\$1~/#!\/$1\/${2:-$TYPE}/{r=1}r" "$0"; }
man() { err "$(tuc "${2-man}" "$1" | sed -n 's/# //p')"; }
ret() { err 'restart terminal to finish'; }

# validate arguments
[ "$BASH_SOURCE" = "$0" ]	|| err 'must execute directly locally'
[ $# -ge 2 ]			|| man "$NAME"
[[ "$1" =~ ^[a-z0-9]+$ ]]	|| err 'username not valid'
[ "$(tuc usr; tuc srv)" ]	|| err 'type not supported'

# main fragment
. '/dev/stdin' <<<"$(tuc usr)"
trap 'rm -r "$TMP"' EXIT; cpx "$JOB"; exe 'job' >"$_"
$SSH -O 'check' &>'/dev/null' || { rm -f "$SCP"; MCP='-M'; }
info "$PWD"; PREV=$($SSH "$MCP" "mkdir -p $RWD; ls \$_/.. | sed 'x;\$!d'")
info 'transferring workspace'; rsync -ae "$SSH" --link-dest="../$PREV" './' ":$RWD"
$SSH -qt "$(exe srv)"; exit

#!/srv/patan-run
cd "$RWD"; QSUB="qsub -${DISPLAY+X}Ix $PWD/$JOB"; LOG="$TMP/log"
job() { info "$VAR" &>"$LOG"; script -qac "$QSUB $(arg "$@")" "$LOG"; }

#!/job/patan-run
cd "$PBS_O_WORKDIR"; trap 'info "exit code $?"; sleep 0.033' EXIT

#!/usr/install
rmc; echo "$RC" >>"$ENV"; cpx "$EXE"; ret

#!/usr/remove
rmc; rm "$0"; ret

#!/usr/version
man 'bash' 'bin'

#!/srv/ssh
[ $# -ge 3 ]	|| "$SHELL"
[ $# -ge 3 ]	&& "$SHELL" -c "$(arg "${@:3}")"

#!/man/java
# main [args...]
# 	main	package.class	(main method's class name)
# 	args	...		(program arguments)

#!/usr/java
[ $# -ge 3 ]	|| man
[ "$3" ]	|| err 'main class cannot be empty'

#!/srv/java
job -q 'epyc' -l 'nodes=1:ppn=16'

#!/job/java
find '.' -name '*.java' -exec javac -encoding 'UTF-8' -d "$TMP" '{}' '+'
java -cp "$TMP" "${@:3}"

#!/man/mpi
# main nodes [args...]
# 	main	main.c	(main file's relative path)
# 	nodes	16	(number of nodes to utilize)
# 	args	...	(program arguments)

#!/usr/mpi
[ $# -ge 4 ]		|| man
[ -f "$3" ]		|| err 'main file not found'
[[ "$4" =~ ^[0-9]+$ ]]	|| err 'nodes must be positive integer'

#!/srv/mpi
job -q 'bi' -l "nodes=$4:ppn=4"

#!/job/mpi
EXE="$TMP/exe"; NODE="$TMP/node"
uniq "$PBS_NODEFILE" >"$NODE"; mpicc "$3" -o "$EXE"
mpirun -np "$4" -machinefile "$NODE" "$EXE" "${@:5}"

#!/man/omp
# main threads [args...]
# 	main	main.c	(main file's relative path)
# 	threads	16	(number of threads to utilize)
# 	args	...	(program arguments)

#!/usr/omp
[ $# -ge 4 ]		|| man
[ -f "$3" ]		|| err 'main file not found'
[[ "$4" =~ ^[0-9]+$ ]]	|| err 'threads must be positive integer'

#!/srv/omp
job -q 'epyc' -l 'nodes=1:ppn=16'

#!/job/omp
EXE="$TMP/exe"
gcc -fopenmp "$3" -o "$EXE"
OMP_NUM_THREADS="$4" "$EXE" "${@:5}"

#!/man/cuda
# main [args...]
# 	main	main.cu	(main file's relative path)
# 	args	...	(program arguments)

#!/usr/cuda
[ $# -ge 3 ]		|| man
[ -f "$3" ]		|| err 'main file not found'

#!/srv/cuda
job -q 'cuda' -l 'nodes=cuda:ppn=16'

#!/job/cuda
EXE="$TMP/exe"
nvcc "$3" -o "$EXE"
"$EXE" "${@:4}"
