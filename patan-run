#!/usr/bin/env bash
# easy remote execution of projects in patan.act.uji.es
# 	source		https://github.com/MAProsper/patan-run
# 	developer	Miguel Ángel Prosper Quíros	(al386125@uji.es)
# 	tester		Paul Ximo Pluijter Izquierdo	(al386152@uji.es)
# 	tester		Adrián Masiá Moreno		(al386159@uji.es)
# 	tester		Adrián Luque Bueso		(al387532@uji.es)
# 	license		BSD 3-Clause
# 	version		10.0.0
log() { info "$VAR" &>"$LOG"; script -qac "$(arg "$@")" "$LOG"; }; set -e
info() { echo "$NAME: $*" >&2; }; err() { info "$*"; exit 1; }; arg() { printf '%q ' "$@"; }
NAME='patan-run'; RWD="${HIST=.local/state/$NAME}/${ID=$(date +%F-%H-%M-%S-$$)}"
TYPE="$2"; VAR=$(arg "$@"); TMP=".$NAME-$ID"; JOB="$TMP/$NAME"; LOG="$TMP/log"

#!/usr/patan-run
# user type [args...]	(cd to project's root first)
# 	user	al386125	(skip username if installed)
# 	type	java, ...	(type of action or project)
# 	args	...		(type specific arguments)
EXE="$HOME/.local/bin/$NAME"; SCP="$HOME/.ssh/$NAME";: "${ENV=$HOME/.${SHELL##*/}rc}"
DST="$1@patan.act.uji.es"; JUMP="${PROXY-$1}@lynx.uji.es"; RC="alias $NAME=$(arg "$(arg "$EXE" "$1")")"
OPT="-oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa -oPreferredAuthentications=password"
SSH="ssh $OPT -oControlMaster=auto -oControlPersist=${TMOUT=256} -q${DISPLAY+Y}S $SCP -J $JUMP $DST"
man() { err "$(tuc "$2" "$1" | sed -n '/^#!/d;/^# /!q;s///;p')"; }; ret() { err 'restart terminal'; }
exe() { echo "HIST=$HIST; ID=$ID; set -- $VAR"; tuc 'usr' 'bin'; tuc "$1" "$NAME"; tuc "$@"; }
rmc() { [ -f "$ENV" ] && grep -v "^${RC%%=*}=" <<<"$(<"$ENV")" >"$ENV" || :; }
tuc() { awk "/^#!/{r=0}\$1~/#!\/${1:-usr}\/${2:-$TYPE}/{r=1}r" "$0"; }
cpx() { mkdir -p "${1%/*}"; [ "$0" -ef "$1" ] || install "$0" "$1"; }

# main fragment
[ "$BASH_SOURCE" = "$0" ]	|| err 'must execute directly locally'
[ $# -ge 2 ]			|| man "$NAME"
[[ "$1" =~ ^[a-z0-9]+$ ]]	|| err 'username not valid'
[ "$(tuc)" ]			|| err 'type not supported'
trap 'rm -rf "$TMP"' EXIT; cpx "$JOB"; exe 'job' >"$_"; eval "$(tuc)"
PREV=$($SSH "mkdir -p $HIST; ls \$_ | tail -1"); info "transferring $PWD"
rsync -ae "$SSH" --link-dest="../$PREV" './' ":$RWD"; $SSH -t "$(exe srv)"; exit

#!/srv/patan-run
job() { log qsub -${DISPLAY+X}Ix "$@" "$PWD/$JOB"; }
cd "$RWD"; eval job $(sed 's/#PBS //p;d' "$JOB")

#!/job/patan-run
cd "$RWD"; trap 'info "exit code $?"; sleep 0.033' EXIT

#!/usr/install
rmc; echo "$RC" >>"$ENV"; cpx "$EXE"; ret

#!/usr/remove
rmc; rm "$0"; ret

#!/usr/version
man 'bin' 'usr'

#!/usr/report
ARC="${TMP#.}.tgz"; cpx "$JOB"; { uname -a; env; cat "$ENV"; } >"$TMP/env"
log "${@::2}" "${@:3}"; info "$ARC"; tar -czf "$ARC" './' &>'/dev/null'

#!/usr/pbs
# job [args...]
# 	job	main.pbs	(job file's relative path)
# 	args	...		(program arguments)
[ $# -ge 3 ]		|| man
[ -f "$3" ]		|| err 'job file not found'
cat "$3" >>"$JOB"

#!/usr/java
# main [args...]
# 	main	package.class	(main method's class name)
# 	args	...		(program arguments)
[ $# -ge 3 ]	|| man
[ "$3" ]	|| err 'main class cannot be empty'

#!/job/java
#PBS -q epyc -l nodes=1:ppn=16
find -name '*.java' -exec javac -encoding 'UTF-8' -d "$TMP" '{}' '+'; java -cp "$TMP" "${@:3}"

#!/usr/mpi
# main nodes [args...]
# 	main	main.c	(main file's relative path)
# 	nodes	16	(number of nodes to utilize)
# 	args	...	(program arguments)
[ $# -ge 4 ]		|| man
[ -f "$3" ]		|| err 'main file not found'
[[ "$4" =~ ^[0-9]+$ ]]	|| err 'nodes must be positive integer'

#!/job/mpi
#PBS -q bi -l nodes=$4:ppn=4
NODE="$TMP/node"; uniq "$PBS_NODEFILE" >"$NODE"
mpicc "$3" -o "$JOB"; mpirun -np "$4" -machinefile "$NODE" "$_" "${@:5}"

#!/usr/omp
# main threads [args...]
# 	main	main.c	(main file's relative path)
# 	threads	16	(number of threads to utilize)
# 	args	...	(program arguments)
[ $# -ge 4 ]		|| man
[ -f "$3" ]		|| err 'main file not found'
[[ "$4" =~ ^[0-9]+$ ]]	|| err 'threads must be positive integer'

#!/job/omp
#PBS -q epyc -l nodes=1:ppn=16
gcc -fopenmp "$3" -o "$JOB"; OMP_NUM_THREADS="$4" "$_" "${@:5}"

#!/usr/cuda
# main [args...]
# 	main	main.cu	(main file's relative path)
# 	args	...	(program arguments)
[ $# -ge 3 ]	|| man
[ -f "$3" ]	|| err 'main file not found'

#!/job/cuda
#PBS -q cuda -l nodes=cuda:ppn=16
nvcc --gpu-architecture='compute_61' "$3" -o "$JOB"; "$_" "${@:4}"
